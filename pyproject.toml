[tool.poetry]
name = "buggy-module"
version = "0.1.0"
description = "Demonstrate linter errors"
authors = ["Benedikt Fuchs <benedikt.fuchs.staw@hotmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "buggy_module" }]
repository = "https://github.com/helpmefindaname/test_pytest_github_actions_annotate"

[tool.poetry.dependencies]
python = "^3.7"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-mypy = "^0.10.3"
black = "^22.12.0"
ruff = "*"
pytest-github-actions-annotate-failures = {git="https://github.com/helpmefindaname/pytest-github-actions-annotate-failures.git", branch="add_multiline_error_strings"}
pytest-xdist = "^3.1.0"
flake8 = "<5.0.0"
pytest-flake8 = "^1.1.1"
pytest-ruff = "0.0.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
target-version = ['py310']


[tool.ruff]
line-length = 120
target-version = 'py310'

[tool.pytest.ini_options]
addopts = "--mypy -n auto --ruff --flake8"
filterwarnings = [
    "error",
    "ignore:SelectableGroups dict interface is deprecated. Use select."
]  # Convert all warnings to errors, imo warnings that are not treated as errors will be ignored by most people.
# My approach is to throw an error and let the programmar check if the error is intended (then add it to the filterwarnings) or not (then fix it!)



[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
warn_unused_ignores = true
warn_no_return = true
